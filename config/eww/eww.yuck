
; Practice Begin
(defvar foo "initial value")
(defvar time-visible false)

(defwidget labeled-container [name]
  (box :class "container"
    name
    (children)))

(defpoll time :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `date '+%Y年%m月%d日 %H時%M分'`)

(defwindow example_bar
           :class "example_bar"
           :monitor 1
           :geometry (geometry :x "0"
                               :y "6px"
                               :height "30px"
                               :width "99%"
                               :anchor "top center")
           :windowtype "dock"
           :exclusive true
  "${time}" )


(defwidget greeter [?text name]
  (box :orientation "horizontal"
       :halign "center"
    text
    (button :onclick "notify-send 'Hello' 'Hello, ${name}'"
      "Greet")))

; Practice End

(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}")
            )
          )
        )
      )
    )
  )
